#include<iostream>
#include <numeric>    
using namespace std;

int main()
{ 
   
   int sum = 1;
   int a[] = {5 , 10 , 15} ;
   cout << "\nResult using accumulate: ";

    cout << accumulate(a , a+3 , sum);

    cout << "\nResult using accumulate with pre-defined function: ";

    cout << accumulate(a, a+3, sum, std::minus<int>());

     return 0; 
     
     
     }









output

Result using accumulate: 31

Result using accumulate with pre-defined function: -29












std::size_t can store the maximum size of a theoretically possible object of any type (including array).
On many platforms (an exception are systems with segmented addressing) std::size_t can safely store the 
value of any non-member pointer, in which case it is synonymous with std::uintptr_t.

std::size_t is commonly used for array indexing and loop counting.
Programs that use other types, such as unsigned int, for array indexing may fail on,
e.g. 64-bit systems when the index exceeds UINT_MAX or if it relies on 32-bit modular arithmetic.
